<?php

//Задание 1
$date="31-12-2020";
$date=implode('-', array_reverse(explode('-', $date)));
$date=str_replace('-', '.', $date);
echo($date);

echo "<br/>";

//Задание 2
$london="london is the capital of great britain";
$London=ucwords($london);
echo($London);

echo "<br/>";

//Задание 3
$password="qwerty123";
if (strlen(trim($password))>12 || strlen(trim($password))<7){
	echo "Придумайте новый пароль";
}
else{
	echo "Пароль ок";
}

echo "<br/>";

//Задание 4
$stroka="1a2b3c4b5d6e7f8g9h0";
$stroka = preg_replace('/\d/', '', $stroka);
echo $stroka;

echo "<br/>";

//Задание с *
$str="Главным фактором языка РНР является практичность. РНР должен предоставить программисту средства для быстрого и эффективного решения поставленных задач. Практический характер РНР обусловлен пятью важными характеристиками: традиционностью, простотой, эффективностью, безопасностью, гибкостью. Существует еще одна характеристика, которая делает РНР особенно привлекательным: он распространяется бесплатно! Причем, с открытыми исходными кодами ( Open Source ). Язык РНР будет казаться знакомым программистам, работающим в разных областях. Многие конструкции языка позаимствованы из Си, Perl. Код РНР очень похож на тот, который встречается в типичных программах на С или Pascal. Это заметно снижает начальные усилия при изучении РНР. PHP — язык, сочетающий достоинства Perl и Си и специально нацеленный на работу в Интернете, язык с универсальным (правда, за некоторыми оговорками) и ясным синтаксисом. И хотя PHP является довольно молодым языком, он обрел такую популярность среди web-программистов, что на данный момент является чуть ли не самым популярным языком для создания web-приложений (скриптов) Создать текстовый файл в любом редакторе, каждая строка которого содержит логин и пароль пользователя, отделенных пробелом в виде login pass login1 123456 затем создать форму ввода логина и пароля на html, при сабмите формы считывать содержимое файла и проверять правильно ли пользователь ввел логин и пароль, в случае правильного ввода вывести логин на экран и так же создать новый файл или перезаписать значение в существующем, используя логин в качестве имени файла, в этот файл заносить число правильных попыток входа для данного пользователя. в первом варианте использовать простые текстовые файлы и функции построчной работы с файлами во следующем варианте создать json файл с массивом юзера, использовать функции работы с json и число правильных попыток входа заносить в json файл";

$tmp=explode(' ', $str, -1);
$row=[];
$output="";
$len=0;

for ($i=0; $i < count($tmp); $i++){ 
	$len = $len + iconv_strlen($tmp[$i]);

	if($len <= 80){
		array_push($row, $tmp[$i]);
		array_push($row, " ");
		$len++;
	}

	else{
		//колво недостающих пробелов
		$len = 80-($len - iconv_strlen($tmp[$i]))+1;

		foreach ($row as &$element) {
			//Первое распределние пробелов
			if($element===" "){
				$element = $element."&nbsp;";
				$len--;
			}

			if ($len==0){
				break;
			}
		}

		if ($len==0){
			//Если пробелов достаточно то запись в вывод
			foreach ($row as $R){
				$output = $output.$R;
			}	
		}

		else{
			//Второе распределние пробелов с конца
			array_reverse($row);
			foreach ($row as &$element) {

				if($element===" "){
					echo "$len";
					$element = $element."&nbsp;";
					$len--;
				}

				if ($len==0){
					break;
				}
			}
			array_reverse($row);
		}
		$output = $output."<br/>";

		$len=0;
		$row=[];
	}
}
print_r($output);
?>